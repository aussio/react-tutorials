{"ast":null,"code":"import _objectWithoutProperties from \"/Users/austincurtis/Git/react-tutorials/react-router/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/austincurtis/Git/react-tutorials/react-router/src/components/App.js\";\n\nconst React = require('react');\n\nconst _require = require('react'),\n      Component = _require.Component;\n\nconst PropTypes = require('prop-types');\n\nconst _require2 = require('react-router-dom'),\n      Route = _require2.Route,\n      withRouter = _require2.withRouter;\n\nclass ScrollToTopRoute extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          Component = _this$props.component,\n          RouteKey = _this$props.RouteKey,\n          location = _this$props.location,\n          rest = _objectWithoutProperties(_this$props, [\"component\", \"RouteKey\", \"location\"]);\n    /**\n     * Sometimes we need to force a React Route to re-render when the\n     * search params (query) in the url changes. React Router does not\n     * do this automatically if you are on the same page when the query\n     * changes. By passing the `RouteKey`ro the `ScrollToTopRoute` and\n     * setting it to true, we are passing the combination of pathname and\n     * search params as a unique key to the component and that is a enough\n     * and clear trigger for the component to re-render without side effects\n     */\n\n\n    const Key = RouteKey ? location.pathname + location.search : null;\n    return React.createElement(Route, Object.assign({}, rest, {\n      render: props => React.createElement(Component, Object.assign({}, props, {\n        key: Key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n  }\n\n}\n\nScrollToTopRoute.propTypes = {\n  path: PropTypes.string,\n  location: PropTypes.shape({\n    pathname: PropTypes.string\n  }),\n  component: PropTypes.instanceOf(Component),\n  RouteKey: PropTypes.boolean\n};\nmodule.exports = withRouter(ScrollToTopRoute); // Usage in App.jsx\n\nReact.createElement(Router, {\n  history: History,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, React.createElement(ScrollToTopRoute, {\n  exact: true,\n  path: \"/\",\n  component: Home,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}), React.createElement(ScrollToTopRoute, {\n  exact: true,\n  path: \"/about\",\n  component: About,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}), React.createElement(ScrollToTopRoute, {\n  exact: true,\n  path: \"/search\",\n  component: Search,\n  RouteKey: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}), React.createElement(ScrollToTopRoute, {\n  exact: true,\n  component: NoMatch,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})));","map":{"version":3,"sources":["/Users/austincurtis/Git/react-tutorials/react-router/src/components/App.js"],"names":["React","require","Component","PropTypes","Route","withRouter","ScrollToTopRoute","componentDidUpdate","prevProps","props","location","pathname","window","scrollTo","render","component","RouteKey","rest","Key","search","propTypes","path","string","shape","instanceOf","boolean","module","exports","History","Home","About","Search","NoMatch"],"mappings":";;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;iBACsBA,OAAO,CAAC,OAAD,C;MAArBC,S,YAAAA,S;;AACR,MAAMC,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;kBAC8BA,OAAO,CAAC,kBAAD,C;MAA7BG,K,aAAAA,K;MAAOC,U,aAAAA,U;;AAEf,MAAMC,gBAAN,SAA+BJ,SAA/B,CAAyC;AAEvCK,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,KAAiCH,SAAS,CAACE,QAAV,CAAmBC,QAAxD,EAAkE;AAChEC,MAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACuD,KAAKL,KAD5D;AAAA,UACYP,SADZ,eACCa,SADD;AAAA,UACuBC,QADvB,eACuBA,QADvB;AAAA,UACiCN,QADjC,eACiCA,QADjC;AAAA,UAC8CO,IAD9C;AAGT;;;;;;;;;;;AASE,UAAMC,GAAG,GAAGF,QAAQ,GAAGN,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACS,MAAhC,GAAyC,IAA7D;AAEA,WAAO,oBAAC,KAAD,oBAAWF,IAAX;AAAiB,MAAA,MAAM,EAAER,KAAK,IAAK,oBAAC,SAAD,oBAAeA,KAAf;AAAsB,QAAA,GAAG,EAAES,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAvBsC;;AA0BzCZ,gBAAgB,CAACc,SAAjB,GAA6B;AAC3BC,EAAAA,IAAI,EAAElB,SAAS,CAACmB,MADW;AAE3BZ,EAAAA,QAAQ,EAAEP,SAAS,CAACoB,KAAV,CAAgB;AACxBZ,IAAAA,QAAQ,EAAER,SAAS,CAACmB;AADI,GAAhB,CAFiB;AAK3BP,EAAAA,SAAS,EAAEZ,SAAS,CAACqB,UAAV,CAAqBtB,SAArB,CALgB;AAM3Bc,EAAAA,QAAQ,EAAEb,SAAS,CAACsB;AANO,CAA7B;AASAC,MAAM,CAACC,OAAP,GAAiBtB,UAAU,CAACC,gBAAD,CAA3B,C,CAEA;;AACA,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAEsB,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,gBAAD;AAAkB,EAAA,KAAK,MAAvB;AAAwB,EAAA,IAAI,EAAC,GAA7B;AAAiC,EAAA,SAAS,EAAEC,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,gBAAD;AAAkB,EAAA,KAAK,MAAvB;AAAwB,EAAA,IAAI,EAAC,QAA7B;AAAsC,EAAA,SAAS,EAAEC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,EAGE,oBAAC,gBAAD;AAAkB,EAAA,KAAK,MAAvB;AAAwB,EAAA,IAAI,EAAC,SAA7B;AAAuC,EAAA,SAAS,EAAEC,MAAlD;AAA0D,EAAA,QAAQ,EAAE,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,EAIE,oBAAC,gBAAD;AAAkB,EAAA,KAAK,MAAvB;AAAwB,EAAA,SAAS,EAAEC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,CADF","sourcesContent":["const React = require('react');\nconst { Component } = require('react');\nconst PropTypes = require('prop-types');\nconst { Route, withRouter } = require('react-router-dom');\n\nclass ScrollToTopRoute extends Component {\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    const { component: Component, RouteKey, location, ...rest } = this.props;\n\n\t\t/**\n\t\t * Sometimes we need to force a React Route to re-render when the\n\t\t * search params (query) in the url changes. React Router does not\n\t\t * do this automatically if you are on the same page when the query\n\t\t * changes. By passing the `RouteKey`ro the `ScrollToTopRoute` and\n\t\t * setting it to true, we are passing the combination of pathname and\n\t\t * search params as a unique key to the component and that is a enough\n\t\t * and clear trigger for the component to re-render without side effects\n\t\t */\n    const Key = RouteKey ? location.pathname + location.search : null;\n\n    return <Route {...rest} render={props => (<Component {...props} key={Key} />)} />;\n  }\n}\n\nScrollToTopRoute.propTypes = {\n  path: PropTypes.string,\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n  component: PropTypes.instanceOf(Component),\n  RouteKey: PropTypes.boolean,\n};\n\nmodule.exports = withRouter(ScrollToTopRoute);\n\n// Usage in App.jsx\n<Router history={History}>\n  <Switch>\n    <ScrollToTopRoute exact path=\"/\" component={Home} />\n    <ScrollToTopRoute exact path=\"/about\" component={About} />\n    <ScrollToTopRoute exact path=\"/search\" component={Search} RouteKey={true} />\n    <ScrollToTopRoute exact component={NoMatch} />\n  </Switch>\n</Router>"]},"metadata":{},"sourceType":"module"}