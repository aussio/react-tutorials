{"version":3,"sources":["components/NasaPic.js","api/nasaAPI.js","components/App.js","serviceWorker.js","index.js"],"names":["NasaPic","date","explanation","url","className","src","getNasaPicsOfTheWeek","last7Dates","result","i","d","Date","setDate","getDate","push","formatDate","last7Days","Promise","all","map","getNasaPicOfTheDay","a","process","fetch","resp","json","dd","mm","getMonth","yyyy","getFullYear","App","useState","nasaPics","setNasaPics","useEffect","then","pics","type","picture","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAaeA,MAVf,YAA8C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,YAAaC,EAAO,EAAPA,IACpC,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAKF,IACV,4BAAKF,GACL,2BAAIC,K,uBCRH,SAASI,IACd,IAAIC,EAWN,WAEE,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAI,IAAIC,KACZD,EAAEE,QAAQF,EAAEG,UAAYJ,GACxBD,EAAOM,KAAKC,EAAWL,IAGzB,OAAOF,EAnBUQ,GAEjB,OAAOC,QAAQC,IAAIX,EAAWY,KAAI,SAAAlB,GAAI,O,2CAAImB,CAAmBnB,O,4CAG/D,WAAkCA,GAAlC,iBAAAoB,EAAA,6DACMlB,EADN,sDAC2DmB,2CAD3D,iBACsGrB,GADtG,SAEqBsB,MAAMpB,GAF3B,cAEQqB,EAFR,gBAGeA,EAAKC,OAHpB,oF,sBAiBA,SAASV,EAAWd,GAClB,IAAIyB,EAAKzB,EAAKY,UACVc,EAAK1B,EAAK2B,WAAa,EACvBC,EAAO5B,EAAK6B,cAQhB,OAPIJ,EAAK,KACPA,EAAK,IAAMA,GAETC,EAAK,KACPA,EAAK,IAAMA,GAEb1B,EAAO4B,EAAO,IAAMF,EAAK,IAAMD,ECClBK,MA7Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAOb,OAJAC,qBAAU,WACR7B,IAAkC8B,MAAK,SAAAC,GAAI,OAAIH,EAAYG,QAC1D,IAGD,yBAAKjC,UAAU,OACb,0BAAMA,UAAU,eACd,2BAAOA,UAAU,aAAakC,KAAK,SACnC,4BAAQlC,UAAU,gBAAgBkC,KAAK,UAAvC,WAIF,yBAAKlC,UAAU,qBACZ6B,EAASd,KAAI,SAAAoB,GAAO,OACnB,kBAAC,EAAD,CACEC,IAAKD,EAAQpC,IACbF,KAAMsC,EAAQtC,KACdC,YAAaqC,EAAQrC,YACrBC,IAAKoC,EAAQpC,YCdLsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.77064612.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NasaPic.css\";\n\nfunction NasaPic({ date, explanation, url }) {\n  return (\n    <div className=\"NasaPic\">\n      <img src={url} />\n      <h1>{date}</h1>\n      <p>{explanation}</p>\n    </div>\n  );\n}\n\nexport default NasaPic;\n","export function getNasaPicsOfTheWeek() {\n  let last7Dates = last7Days();\n\n  return Promise.all(last7Dates.map(date => getNasaPicOfTheDay(date)));\n}\n\nasync function getNasaPicOfTheDay(date) {\n  let url = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${date}`;\n  const resp = await fetch(url);\n  return await resp.json();\n}\n\nfunction last7Days() {\n  var result = [];\n  for (var i = 0; i < 7; i++) {\n    var d = new Date();\n    d.setDate(d.getDate() - i);\n    result.push(formatDate(d));\n  }\n\n  return result;\n}\n\nfunction formatDate(date) {\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1;\n  var yyyy = date.getFullYear();\n  if (dd < 10) {\n    dd = \"0\" + dd;\n  }\n  if (mm < 10) {\n    mm = \"0\" + mm;\n  }\n  date = yyyy + \"-\" + mm + \"-\" + dd;\n  return date;\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport NasaPic from \"./NasaPic\";\nimport { getNasaPicsOfTheWeek } from \"../api/nasaAPI\";\n\nfunction App() {\n  const [nasaPics, setNasaPics] = useState([]);\n\n  useEffect(() => {\n    getNasaPicsOfTheWeek(setNasaPics).then(pics => setNasaPics(pics));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"picture-container\">\n        {nasaPics.map(picture => (\n          <NasaPic\n            key={picture.url}\n            date={picture.date}\n            explanation={picture.explanation}\n            url={picture.url}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}